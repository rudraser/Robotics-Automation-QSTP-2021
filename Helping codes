Creating a workspace for catkin
Let's create and build a catkin workspace:

$ mkdir -p ~/catkin_ws/src
$ cd ~/catkin_ws/
$ catkin_make




Creating a ROS Package
For a package to be considered a catkin package it must meet a few requirements:

   1. The package must contain a catkin compliant package.xml file.
        :That package.xml file provides meta information about the package. 

   2. The package must contain a CMakeLists.txt which uses catkin.

        :If it is a catkin metapackage it must have the relevant boilerplate CMakeLists.txt file. 
   3. Each package must have its own folder
        
        :This means no nested packages nor multiple packages sharing the same directory. 
        
        


Creating a catkin Package
 
This tutorial will demonstrate how to use the catkin_create_pkg script to create a new catkin package, and what you can do with it after it has been created.

First change to the source space directory of the catkin workspace you created in the Creating a Workspace for catkin tutorial:

# You should have created this in the Creating a Workspace Tutorial
$ cd ~/catkin_ws/src

Now use the catkin_create_pkg script to create a new package called 'beginner_tutorials' which depends on std_msgs, roscpp, and rospy:

$ catkin_create_pkg beginner_tutorials std_msgs rospy roscpp

This will create a beginner_tutorials folder which contains a package.xml and a CMakeLists.txt, which have been partially filled out with the information you gave catkin_create_pkg.

catkin_create_pkg requires that you give it a package_name and optionally a list of dependencies on which that package depends:

# This is an example, do not try to run this
# catkin_create_pkg <package_name> [depend1] [depend2] [depend3]





Building a catkin workspace and sourcing the setup file
Now you need to build the packages in the catkin workspace:

$ cd ~/catkin_ws
$ catkin_make

After the workspace has been built it has created a similar structure in the devel subfolder as you usually find under /opt/ros/$ROSDISTRO_NAME.

To add the workspace to your ROS environment you need to source the generated setup file:

$ . ~/catkin_ws/devel/setup.bash



Understanding ROS Topics
      
     2.2 Introducing rostopic

      The rostopic tool allows you to get information about ROS topics.

      You can use the help option to get the available sub-commands for rostopic

         $ rostopic -h

             rostopic bw     display bandwidth used by topic
             rostopic echo   print messages to screen
             rostopic hz     display publishing rate of topic    
             rostopic list   print information about active topics
             rostopic pub    publish data to topic
             rostopic type   print topic type

      Or pressing tab key after rostopic prints the possible sub-commands:

      $ rostopic 
            bw    echo  find  hz    info  list  pub   type 

      Let's use some of these topic sub-commands to examine turtlesim.
      
      
      
    > Using rqt_plot

   Note: If you're using electric or earlier, rqt is not available. Use rxplot instead.

   rqt_plot displays a scrolling time plot of the data published on topics. Here we'll use rqt_plot to plot the data being published on the /turtle1/pose topic. 
   First, start rqt_plot by typing

      $ rosrun rqt_plot rqt_plot

   in a new terminal. In the new window that should pop up, a text box in the upper left corner gives you the ability to add any topic to the plot. 
   Typing /turtle1/pose/x will highlight the plus button, previously disabled. Press it and repeat the same procedure with the topic /turtle1/pose/y.
   You will now see the turtle's x-y location plotted in the graph.
   
   
   
   
Understanding ROS Services and Parameters
   Description: This tutorial introduces ROS services, and parameters as well as using the rosservice and rosparam commandline tools
   







